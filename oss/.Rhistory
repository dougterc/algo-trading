install.packages("tinytex")
tinytex::install_tinytex()
install.packages("languageserver")
lending.origination.packages <- function() {
require(scales)
require(AER)
require(tidyverse)
require(broom)
require(quantmod)
require(tseries)
require(quantmod)
require(BatchGetSymbols)
require(rvest)
require(datetime)
require(lubridate)
require(expss)
require(dplyr)
require(knitr)
require(bizdays)
require(fpp2)
require(zoo)
require(tidyr) #for crossing
require(httr)
require(jsonlite)
require(rameritrade)
require(matrixStats)
require(readxl)
require(sys)
require(splitstackshape)
require(googledrive)
library(randNames)
library(udpipe)
require(RMySQL)
require(DBI)
require(xfun)
'%!in%' <- function(x,y)!('%in%'(x,y))
}
lending.database.connect <- function(type) {
conn <- NA
if(type == "local") {
#establish SQL connection
mydb = dbConnect(MySQL(),
user='root',
password='Rangers2014!',
dbname='lending-origination',
host='localhost')
conn <- mydb
} else {
}
return (conn)
}
lending.origination.packages()
#connect
mydb <- lending.database.connect("local")
#get loan application
app_id <- 1
app <- dbGetQuery(mydb,paste0("SELECT * FROM loan_applications LEFT JOIN borrower_info ON loan_applications.borrower_id = borrower_info.borrower_id WHERE application_id = ",app_id,";"))
#from database
borrower_name <- paste0(app$borrower_first_name," ",app$borrower_last_name)
run_date <- now()
loan_term <- floor(app$loan_term_seeked[1]*12)
loan_amount <- app$loan_amount_seeked[1]
for_school <- app$exp_school
metric_salary <- 60000
borrower_id <- app$borrower_id
loans <- dbGetQuery(mydb,paste0("SELECT * FROM loan_info WHERE borrower_id = ",borrower_id,";"))
number_loans <- nrow(loans)
first_pmt_date <- as.Date('2025-06-01')
final_pmt_date <- as.Date('2055-05-01')
#margins and formatting to drive sizes
left_margin <- 2
right_margin <- 1
top_margin <- 2
bottom_margin <- 5
labels <- 1
ncols <- loan_term + labels + left_margin + right_margin + 1
nrows <- 100
#blank sheet
sheet <- as.data.frame(matrix(data = "", nrow = nrows, ncol = ncols)) %>%
`colnames<-`(as.vector(matrix(data="",nrow=1,ncol=ncols)))
#name
x <- left_margin+1
y <- top_margin+1
sheet[y,x] <- borrower_name
#run date
y <- y+1
sheet[y,x] <- paste0("Underwritten As Of: ",run_date)
#for school
y <- y+1
sheet[y,x] <- paste0("For Attendance At: ",for_school)
#borrower status
y <- y+1
sheet[y,x] <- ifelse(number_loans>0,"Repeat Borrower","New Borrower")
#line break
y <- y+1
sheet[y,x] <- ""
#header
y <- y+1
sheet[y,x] <- "Items"
x <- x+1
months <- seq(as.Date(first_pmt_date),as.Date(final_pmt_date),"month")
months <- c(as.Date(now()),months)
my.month.name <- Vectorize(function(n) c("Jan", "Feb", "Mar",
"Apr", "May", "Jun", "Jul",
"Aug", "Sep", "Oct",
"Nov", "Dec")[n])
for(i in c(0:loan_term)+x) {
sheet[y,i] <- paste0(my.month.name(month(months[i-x+1]))," ",year(months[i-x+1]))
}
#labels
#salary and job expectations
x <- x-1
y <- y+1
sheet[y,x] <- "Annual Salary"
y <- y+1
sheet[y,x] <- "Monthly Salary"
y <- y+1
sheet[y,x] <- "   Tax Rate"
y <- y+1
sheet[y,x] <- "   Taxes"
y <- y+1
sheet[y,x] <- "          Net Pay"
y <- y+1
sheet[y,x] <- ""
#line break
y <- y+1
#expenses
#average rent
sheet[y,x] <- "Average Rent"
y <- y+1
sheet[y,x] <- "Food Budget"
y <- y+1
sheet[y,x] <- "Gas"
y <- y+1
sheet[y,x] <- "          Total Expenses"
y <- y+2
sheet[y,x] <- "                    Net Income Before Loan Obligations"
y <- y+1
#loan obligations
#loan applied for
y <- y+1
sheet[y,x] <- paste0("Loan Applied For (",app_id,") Principal:")
y <- y+1
sheet[y,x] <- paste0("Loan Applied For (",app_id,") Variable:")
y <- y+1
sheet[y,x] <- paste0("          Loan Applied For (",app_id,") Total:")
#existing loans
y <- y+1
for(i in seq(number_loans)) {
sheet[y,x] <- paste0("Existing Loan (",loans$loan_id[i],") Principal:")
y <- y+1
sheet[y,x] <- paste0("Existing Loan (",loans$loan_id[i],") Variable:")
y <- y+1
sheet[y,x] <- paste0("          Existing Loan (",loans$loan_id[i],") Total:")
y <- y+1
}
sheet[y,x] <- "          Total Loan Obligations"
y <- y+2
sheet[y,x] <- "               Net Income After Loan Obligations"
#salary
y <- 9
for(i in c(0:loan_term)+x+1) {
sheet[y,i] <- metric_salary
sheet[y+1,i] <- metric_salary/12
}
#tax rate
y <- 11
taxrate <- 0.23
for(i in c(0:loan_term)+x+1) {
sheet[y,i] <- taxrate
sheet[y+1,i] <- metric_salary/12*taxrate
}
#net pay
y <- 13
for(i in c(0:loan_term)+x+1) {
sheet[y,i] <- as.numeric(sheet[grep("Monthly Salary",sheet[,3]),i]) - as.numeric(sheet[grep("Taxes",sheet[,3]),i])
}
#average rent
y <- grep("Average Rent",sheet[,3])
for(i in c(0:loan_term)+x+1) {
sheet[y,i] <- 1200
}
#food budget
y <- grep("Food Budget",sheet[,3])
for(i in c(0:loan_term)+x+1) {
sheet[y,i] <- 900
}
#gas budget
y <- grep("Gas",sheet[,3])
for(i in c(0:loan_term)+x+1) {
sheet[y,i] <- 200
}
#total expenses
yA <- grep("Net Pay",sheet[,3])+2
yB <- y
y <- y+1
for(i in c(0:loan_term)+x+1) {
sheet[y,i] <- sum(as.numeric(sheet[c(yA:yB),i]))
}
#net income before loan obligations
y <- grep("Total Expenses",sheet[,3])+2
for(i in c(0:loan_term)+x+1) {
sheet[y,i] <- as.numeric(sheet[grep("Net Pay",sheet[,3]),i]) - as.numeric(sheet[grep("Total Expenses",sheet[,3]),i])
}
#existing loan
y <- y+5
for(l in seq(nrow(loans))) {
for(i in c(0:loan_term)+x+1) {
sheet[y,i] <- loans$min_monthly_pmt[l]
sheet[y+1,i] <- as.numeric(loans$variable_rate[l]) * as.numeric(sheet[grep("Monthly Salary",sheet[,3]),i])
sheet[y+2,i] <- as.numeric(sheet[y,i])+as.numeric(sheet[y+1,i])
}
y <- y+3
}
for(i in c(0:loan_term)+x+1) {
sheet[y,i] <- (sheet[(grep("Net Income Before",sheet[,3])+2):(y-1),c(3,i)] %>%
`colnames<-`(c("Item","Current")) %>%
filter(grepl("Total",.$Item)) %>%
transform(Current = as.numeric(Current)) %>%
transform(Current = ifelse(is.na(Current),0,Current)) %>%
summarize(lobs = sum(Current)))[[1]]
}
#write sheet
write_csv(sheet,"./uw-test.csv")
sandbox.loadPackages <- function() {
require(scales)
require(AER)
require(tidyverse)
require(broom)
require(quantmod)
require(tseries)
require(quantmod)
require(BatchGetSymbols)
require(rvest)
require(datetime)
require(lubridate)
require(expss)
require(dplyr)
require(knitr)
require(bizdays)
require(fpp2)
require(zoo)
require(tidyr) #for crossing
require(httr)
require(jsonlite)
require(rameritrade)
require(matrixStats)
require(readxl)
require(sys)
require(splitstackshape)
require(googledrive)
library(randNames)
library(udpipe)
require(RMySQL)
require(DBI)
require(xfun)
'%!in%' <- function(x,y)!('%in%'(x,y))
return(%!in%)
}
sandbox.loadPackages <- function() {
require(scales)
require(AER)
require(tidyverse)
require(broom)
require(quantmod)
require(tseries)
require(quantmod)
require(BatchGetSymbols)
require(rvest)
require(datetime)
require(lubridate)
require(expss)
require(dplyr)
require(knitr)
require(bizdays)
require(fpp2)
require(zoo)
require(tidyr) #for crossing
require(httr)
require(jsonlite)
require(rameritrade)
require(matrixStats)
require(readxl)
require(sys)
require(splitstackshape)
require(googledrive)
library(randNames)
library(udpipe)
require(RMySQL)
require(DBI)
require(xfun)
'%!in%' <- function(x,y)!('%in%'(x,y))
return('%!in%')
}
sandbox.loadPackages()
sandbox.loadPackages <- function() {
require(scales)
require(AER)
require(tidyverse)
require(broom)
require(quantmod)
require(tseries)
require(quantmod)
require(BatchGetSymbols)
require(rvest)
require(datetime)
require(lubridate)
require(expss)
require(dplyr)
require(knitr)
require(bizdays)
require(fpp2)
require(zoo)
require(tidyr) #for crossing
require(httr)
require(jsonlite)
require(rameritrade)
require(matrixStats)
require(readxl)
require(sys)
require(splitstackshape)
require(googledrive)
library(randNames)
library(udpipe)
require(RMySQL)
require(DBI)
require(xfun)
'%!in%' <- function(x,y)!('%in%'(x,y))
}
sandbox.loadPackages()
getQuote('TRVN')
?portfolio.optim()
stocks <- c('AAPL','MSFT','VRNS')
input.sheet <- read_xlsx("./algo-trading/sample_settings_webpage.xlsx")
input.sheet
input.sheet <- read_xlsx("./algo-trading/sample_settings_webpage.xlsx")
input.sheet <- read_xlsx("./algo-trading/sample_settings_webpage.xlsx")
input.sheet
input.sheet <- read_xlsx("./algo-trading/sample_settings_webpage.xlsx")
input.sheet
input.sheet <- read_xlsx("./algo-trading/sample_settings_webpage.xlsx") %>%
filter(!is.na(Prompt))
input.sheet
input.sheet <- read_xlsx("./algo-trading/sample_settings_webpage.xlsx") %>%
filter(!is.na(Prompt)) %>%
select(Prompt,Input)
input.sheet
unlist(strsplit(input.sheet$Input[5],","))
unlist(strsplit(input.sheet$Input[4],","))
trim(unlist(strsplit(input.sheet$Input[4],",")))
str_trim(" hello ")
str_trim(unlist(strsplit(input.sheet$Input[4],",")))
stocks_in <- str_trim(unlist(strsplit(input.sheet$Input[4],",")))
getQuote(c(stocks_in))
getQuote(c(stocks_in))$Last
#libraries. Install if necessary
library(rvest)
library(dplyr)
#Insider trading URL
url <- "https://www.iposcoop.com/ipo-calendar/"
page <- read_html(url)
#code that pulls the numbers. put in brackets to make cleaner
{
#First line creates the variable, second line finds the ticker,
#third line turns it into the text we actually need.
columns <- page %>%
html_nodes("th") %>%
html_text()
#View(columns)
}
#company
{
company <- page %>%
html_nodes("td:nth-child(1) a") %>%
html_text()
#View(company)
}
#symbol
{
symbol <- page %>%
html_nodes("td:nth-child(2)") %>%
html_text()
#View(symbol)
}
#lead managers
{
lead_managers <- page %>%
html_nodes("td:nth-child(3)") %>%
html_text()
#View(lead_managers)
}
#shares (millions)
{
shares_millions <- page %>%
html_nodes("td:nth-child(4)") %>%
html_text()
#View(shares_millions)
}
#price (low)
{
price_low <- page %>%
html_nodes("td:nth-child(5)") %>%
html_text()
#View(price_low)
}
#price (high)
{
price_high <- page %>%
html_nodes(".hide-sm+ td.hide-sm") %>%
html_text()
#View(price_high)
}
#estimated dollar volume
{
est_dollar_volume <- page %>%
html_nodes("td:nth-child(7)") %>%
html_text()
#View(est_dollar_value)
}
#expected trade date
{
expected_trade_date <- page %>%
html_nodes("td:nth-child(8)") %>%
html_text()
#View(expected_trade_date)
}
#SCOOP rating
{
SCOOP_rating <- page %>%
html_nodes("td:nth-child(9)") %>%
html_text()
#View(SCOOP_rating)
}
#rating change
{
rating_change <- page %>%
html_nodes("td:nth-child(10)") %>%
html_text()
#View(rating_change)
}
IPOScoop <- data.frame(
company = company,
symbol = symbol,
lead_managers = lead_managers,
shares_millions = shares_millions,
price_low = price_low,
price_high = price_high,
est_dollar_volume = est_dollar_volume,
expected_trade_date = expected_trade_date,
SCOOP_rating = SCOOP_rating,
rating_change = rating_change
)
View(IPOScoop)
#option chain
setwd("~/algo-trading/oss/")
#packages
oss.general.loadPackages()
#option chain
setwd("~/algo-trading/oss/")
source("./oss_functions.R")
#packages
oss.general.loadPackages()
#initialize position framepos
pos <- as.data.frame(matrix(NA,2,6)) %>%
`colnames<-`(c("Strategy","Struct1","ToPrice1","Struct2","ToPrice2","ToEachother"))
pos[1,] <- c("Long Strangle","Call",">","Put","<","Not Equal")
pos[2,] <- c("Long Straddle","Call","=","Put","=","Equal")
stock <- 'AAPL'
for(i in seq(length(stock))) {
}
s <- 1
chain <- getOptionChain(stock,Exp = "2022-04-08")
p0 <- getQuote(stock)$Last
structOneList <- if(pos$Strategy[s]=="Long Strangle") {
struct.one <- as.data.frame(
chain$calls %>%
filter(Strike > p0))
}
structTwoList <- if(pos$Strategy[s]=="Long Strangle") {
struct.two <- as.data.frame(
chain$puts %>%
filter(Strike < p0))
}
structOneList
structTwoList
